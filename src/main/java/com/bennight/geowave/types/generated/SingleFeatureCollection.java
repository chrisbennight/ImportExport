/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.bennight.geowave.types.generated;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SingleFeatureCollection extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SingleFeatureCollection\",\"namespace\":\"com.bennight.geowave.types.generated\",\"fields\":[{\"name\":\"FeatureTypeName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Attributes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"AttributeTypes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"AttributeDefaultClassifications\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"Values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AttributeValues\",\"fields\":[{\"name\":\"fid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}},{\"name\":\"classifications\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String FeatureTypeName;
  @Deprecated public java.util.List<java.lang.String> Attributes;
  @Deprecated public java.util.List<java.lang.String> AttributeTypes;
  @Deprecated public java.util.List<java.lang.String> AttributeDefaultClassifications;
  @Deprecated public java.util.List<com.bennight.geowave.types.generated.AttributeValues> Values;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SingleFeatureCollection() {}

  /**
   * All-args constructor.
   */
  public SingleFeatureCollection(java.lang.String FeatureTypeName, java.util.List<java.lang.String> Attributes, java.util.List<java.lang.String> AttributeTypes, java.util.List<java.lang.String> AttributeDefaultClassifications, java.util.List<com.bennight.geowave.types.generated.AttributeValues> Values) {
    this.FeatureTypeName = FeatureTypeName;
    this.Attributes = Attributes;
    this.AttributeTypes = AttributeTypes;
    this.AttributeDefaultClassifications = AttributeDefaultClassifications;
    this.Values = Values;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return FeatureTypeName;
    case 1: return Attributes;
    case 2: return AttributeTypes;
    case 3: return AttributeDefaultClassifications;
    case 4: return Values;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: FeatureTypeName = (java.lang.String)value$; break;
    case 1: Attributes = (java.util.List<java.lang.String>)value$; break;
    case 2: AttributeTypes = (java.util.List<java.lang.String>)value$; break;
    case 3: AttributeDefaultClassifications = (java.util.List<java.lang.String>)value$; break;
    case 4: Values = (java.util.List<com.bennight.geowave.types.generated.AttributeValues>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'FeatureTypeName' field.
   */
  public java.lang.String getFeatureTypeName() {
    return FeatureTypeName;
  }

  /**
   * Sets the value of the 'FeatureTypeName' field.
   * @param value the value to set.
   */
  public void setFeatureTypeName(java.lang.String value) {
    this.FeatureTypeName = value;
  }

  /**
   * Gets the value of the 'Attributes' field.
   */
  public java.util.List<java.lang.String> getAttributes() {
    return Attributes;
  }

  /**
   * Sets the value of the 'Attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(java.util.List<java.lang.String> value) {
    this.Attributes = value;
  }

  /**
   * Gets the value of the 'AttributeTypes' field.
   */
  public java.util.List<java.lang.String> getAttributeTypes() {
    return AttributeTypes;
  }

  /**
   * Sets the value of the 'AttributeTypes' field.
   * @param value the value to set.
   */
  public void setAttributeTypes(java.util.List<java.lang.String> value) {
    this.AttributeTypes = value;
  }

  /**
   * Gets the value of the 'AttributeDefaultClassifications' field.
   */
  public java.util.List<java.lang.String> getAttributeDefaultClassifications() {
    return AttributeDefaultClassifications;
  }

  /**
   * Sets the value of the 'AttributeDefaultClassifications' field.
   * @param value the value to set.
   */
  public void setAttributeDefaultClassifications(java.util.List<java.lang.String> value) {
    this.AttributeDefaultClassifications = value;
  }

  /**
   * Gets the value of the 'Values' field.
   */
  public java.util.List<com.bennight.geowave.types.generated.AttributeValues> getValues() {
    return Values;
  }

  /**
   * Sets the value of the 'Values' field.
   * @param value the value to set.
   */
  public void setValues(java.util.List<com.bennight.geowave.types.generated.AttributeValues> value) {
    this.Values = value;
  }

  /** Creates a new SingleFeatureCollection RecordBuilder */
  public static com.bennight.geowave.types.generated.SingleFeatureCollection.Builder newBuilder() {
    return new com.bennight.geowave.types.generated.SingleFeatureCollection.Builder();
  }
  
  /** Creates a new SingleFeatureCollection RecordBuilder by copying an existing Builder */
  public static com.bennight.geowave.types.generated.SingleFeatureCollection.Builder newBuilder(com.bennight.geowave.types.generated.SingleFeatureCollection.Builder other) {
    return new com.bennight.geowave.types.generated.SingleFeatureCollection.Builder(other);
  }
  
  /** Creates a new SingleFeatureCollection RecordBuilder by copying an existing SingleFeatureCollection instance */
  public static com.bennight.geowave.types.generated.SingleFeatureCollection.Builder newBuilder(com.bennight.geowave.types.generated.SingleFeatureCollection other) {
    return new com.bennight.geowave.types.generated.SingleFeatureCollection.Builder(other);
  }
  
  /**
   * RecordBuilder for SingleFeatureCollection instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SingleFeatureCollection>
    implements org.apache.avro.data.RecordBuilder<SingleFeatureCollection> {

    private java.lang.String FeatureTypeName;
    private java.util.List<java.lang.String> Attributes;
    private java.util.List<java.lang.String> AttributeTypes;
    private java.util.List<java.lang.String> AttributeDefaultClassifications;
    private java.util.List<com.bennight.geowave.types.generated.AttributeValues> Values;

    /** Creates a new Builder */
    private Builder() {
      super(com.bennight.geowave.types.generated.SingleFeatureCollection.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.bennight.geowave.types.generated.SingleFeatureCollection.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.FeatureTypeName)) {
        this.FeatureTypeName = data().deepCopy(fields()[0].schema(), other.FeatureTypeName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Attributes)) {
        this.Attributes = data().deepCopy(fields()[1].schema(), other.Attributes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.AttributeTypes)) {
        this.AttributeTypes = data().deepCopy(fields()[2].schema(), other.AttributeTypes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.AttributeDefaultClassifications)) {
        this.AttributeDefaultClassifications = data().deepCopy(fields()[3].schema(), other.AttributeDefaultClassifications);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Values)) {
        this.Values = data().deepCopy(fields()[4].schema(), other.Values);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SingleFeatureCollection instance */
    private Builder(com.bennight.geowave.types.generated.SingleFeatureCollection other) {
            super(com.bennight.geowave.types.generated.SingleFeatureCollection.SCHEMA$);
      if (isValidValue(fields()[0], other.FeatureTypeName)) {
        this.FeatureTypeName = data().deepCopy(fields()[0].schema(), other.FeatureTypeName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Attributes)) {
        this.Attributes = data().deepCopy(fields()[1].schema(), other.Attributes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.AttributeTypes)) {
        this.AttributeTypes = data().deepCopy(fields()[2].schema(), other.AttributeTypes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.AttributeDefaultClassifications)) {
        this.AttributeDefaultClassifications = data().deepCopy(fields()[3].schema(), other.AttributeDefaultClassifications);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Values)) {
        this.Values = data().deepCopy(fields()[4].schema(), other.Values);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'FeatureTypeName' field */
    public java.lang.String getFeatureTypeName() {
      return FeatureTypeName;
    }
    
    /** Sets the value of the 'FeatureTypeName' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder setFeatureTypeName(java.lang.String value) {
      validate(fields()[0], value);
      this.FeatureTypeName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'FeatureTypeName' field has been set */
    public boolean hasFeatureTypeName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'FeatureTypeName' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder clearFeatureTypeName() {
      FeatureTypeName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'Attributes' field */
    public java.util.List<java.lang.String> getAttributes() {
      return Attributes;
    }
    
    /** Sets the value of the 'Attributes' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder setAttributes(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.Attributes = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'Attributes' field has been set */
    public boolean hasAttributes() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'Attributes' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder clearAttributes() {
      Attributes = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'AttributeTypes' field */
    public java.util.List<java.lang.String> getAttributeTypes() {
      return AttributeTypes;
    }
    
    /** Sets the value of the 'AttributeTypes' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder setAttributeTypes(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.AttributeTypes = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'AttributeTypes' field has been set */
    public boolean hasAttributeTypes() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'AttributeTypes' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder clearAttributeTypes() {
      AttributeTypes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'AttributeDefaultClassifications' field */
    public java.util.List<java.lang.String> getAttributeDefaultClassifications() {
      return AttributeDefaultClassifications;
    }
    
    /** Sets the value of the 'AttributeDefaultClassifications' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder setAttributeDefaultClassifications(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.AttributeDefaultClassifications = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'AttributeDefaultClassifications' field has been set */
    public boolean hasAttributeDefaultClassifications() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'AttributeDefaultClassifications' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder clearAttributeDefaultClassifications() {
      AttributeDefaultClassifications = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'Values' field */
    public java.util.List<com.bennight.geowave.types.generated.AttributeValues> getValues() {
      return Values;
    }
    
    /** Sets the value of the 'Values' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder setValues(java.util.List<com.bennight.geowave.types.generated.AttributeValues> value) {
      validate(fields()[4], value);
      this.Values = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'Values' field has been set */
    public boolean hasValues() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'Values' field */
    public com.bennight.geowave.types.generated.SingleFeatureCollection.Builder clearValues() {
      Values = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public SingleFeatureCollection build() {
      try {
        SingleFeatureCollection record = new SingleFeatureCollection();
        record.FeatureTypeName = fieldSetFlags()[0] ? this.FeatureTypeName : (java.lang.String) defaultValue(fields()[0]);
        record.Attributes = fieldSetFlags()[1] ? this.Attributes : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        record.AttributeTypes = fieldSetFlags()[2] ? this.AttributeTypes : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.AttributeDefaultClassifications = fieldSetFlags()[3] ? this.AttributeDefaultClassifications : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        record.Values = fieldSetFlags()[4] ? this.Values : (java.util.List<com.bennight.geowave.types.generated.AttributeValues>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
